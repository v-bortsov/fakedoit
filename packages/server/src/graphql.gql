schema {
  query: RootQuery
  mutation: RootMutations
}

type RootQuery {
  cities(
    id: Int

    """
    A JSON object conforming the the shape specified in http://docs.sequelizejs.com/en/latest/docs/querying/
    """
    where: SequelizeJSON
    limit: Int
    order: String
    offset: Int
  ): [cities]
  citiess(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int
    orderBy: [citiesConnectionOrderBy]
  ): citiessConnection
  continents(
    id: Int

    """
    A JSON object conforming the the shape specified in http://docs.sequelizejs.com/en/latest/docs/querying/
    """
    where: SequelizeJSON
    limit: Int
    order: String
    offset: Int
  ): [continents]
  continentss(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int
    orderBy: [continentsConnectionOrderBy]
  ): continentssConnection
  countries(
    id: Int

    """
    A JSON object conforming the the shape specified in http://docs.sequelizejs.com/en/latest/docs/querying/
    """
    where: SequelizeJSON
    limit: Int
    order: String
    offset: Int
  ): [countries]
  countriess(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int
    orderBy: [countriesConnectionOrderBy]
  ): countriessConnection
  countries_languages(
    id: Int

    """
    A JSON object conforming the the shape specified in http://docs.sequelizejs.com/en/latest/docs/querying/
    """
    where: SequelizeJSON
    limit: Int
    order: String
    offset: Int
  ): [countries_languages]
  countries_languagess(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int
    orderBy: [countries_languagesConnectionOrderBy]
  ): countries_languagessConnection
  courses(
    id: String

    """
    A JSON object conforming the the shape specified in http://docs.sequelizejs.com/en/latest/docs/querying/
    """
    where: SequelizeJSON
    limit: Int
    order: String
    offset: Int
  ): [courses]
  coursess(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int
    orderBy: [coursesConnectionOrderBy]
  ): coursessConnection
  currencies(
    id: Int

    """
    A JSON object conforming the the shape specified in http://docs.sequelizejs.com/en/latest/docs/querying/
    """
    where: SequelizeJSON
    limit: Int
    order: String
    offset: Int
  ): [currencies]
  currenciess(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int
    orderBy: [currenciesConnectionOrderBy]
  ): currenciessConnection
  districts(
    id: Int

    """
    A JSON object conforming the the shape specified in http://docs.sequelizejs.com/en/latest/docs/querying/
    """
    where: SequelizeJSON
    limit: Int
    order: String
    offset: Int
  ): [districts]
  districtss(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int
    orderBy: [districtsConnectionOrderBy]
  ): districtssConnection
  districts_regions(
    id: Int

    """
    A JSON object conforming the the shape specified in http://docs.sequelizejs.com/en/latest/docs/querying/
    """
    where: SequelizeJSON
    limit: Int
    order: String
    offset: Int
  ): [districts_regions]
  districts_regionss(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int
    orderBy: [districts_regionsConnectionOrderBy]
  ): districts_regionssConnection
  exonyms(
    id: Int

    """
    A JSON object conforming the the shape specified in http://docs.sequelizejs.com/en/latest/docs/querying/
    """
    where: SequelizeJSON
    limit: Int
    order: String
    offset: Int
  ): [exonyms]
  exonymss(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int
    orderBy: [exonymsConnectionOrderBy]
  ): exonymssConnection
  languages(
    id: Int

    """
    A JSON object conforming the the shape specified in http://docs.sequelizejs.com/en/latest/docs/querying/
    """
    where: SequelizeJSON
    limit: Int
    order: String
    offset: Int
  ): [languages]
  languagess(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int
    orderBy: [languagesConnectionOrderBy]
  ): languagessConnection
  regions(
    id: Int

    """
    A JSON object conforming the the shape specified in http://docs.sequelizejs.com/en/latest/docs/querying/
    """
    where: SequelizeJSON
    limit: Int
    order: String
    offset: Int
  ): [regions]
  regionss(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int
    orderBy: [regionsConnectionOrderBy]
  ): regionssConnection
}

type cities {
  id: Int
  name: String
  slug: String
  native: String
  capital: Boolean
  country_id: Int
  population: Int
  latitude: String
  tz: String
  timezone: String
  region_id: Int
  distrinct_id: Int
  longitude: String
  country: countries
}

type countries {
  id: Int
  currency_id: Int
  name: String
  native: String
  phone: String
  abbr: String
  capital: String
  cities(
    """
    A JSON object conforming the the shape specified in http://docs.sequelizejs.com/en/latest/docs/querying/
    """
    where: SequelizeJSON
    limit: Int
    order: String
    offset: Int
  ): [cities]
  countries_languages(
    """
    A JSON object conforming the the shape specified in http://docs.sequelizejs.com/en/latest/docs/querying/
    """
    where: SequelizeJSON
    limit: Int
    order: String
    offset: Int
  ): [countries_languages]
  currency: currencies
}

"""The `JSON` scalar type represents raw JSON as values."""
scalar SequelizeJSON

type countries_languages {
  id: Int
  country_id: Int
  language_id: Int
  country: countries
  language: languages
}

type languages {
  id: Int
  native: String
  name: String
  abbr: String
  rtl: Boolean
  countries_languages(
    """
    A JSON object conforming the the shape specified in http://docs.sequelizejs.com/en/latest/docs/querying/
    """
    where: SequelizeJSON
    limit: Int
    order: String
    offset: Int
  ): [countries_languages]
}

type currencies {
  id: Int
  native: String
  name: String
  abbr: String
  countries(
    """
    A JSON object conforming the the shape specified in http://docs.sequelizejs.com/en/latest/docs/querying/
    """
    where: SequelizeJSON
    limit: Int
    order: String
    offset: Int
  ): [countries]
}

"""A connection to a list of items."""
type citiessConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [citiessEdge]
  total: Int
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

"""An edge in a connection."""
type citiessEdge {
  """The item at the end of the edge"""
  node: cities

  """A cursor for use in pagination"""
  cursor: String!
}

enum citiesConnectionOrderBy {
  id
  em
}

type continents {
  id: Int
  name: String
  abbr: String
}

"""A connection to a list of items."""
type continentssConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [continentssEdge]
  total: Int
}

"""An edge in a connection."""
type continentssEdge {
  """The item at the end of the edge"""
  node: continents

  """A cursor for use in pagination"""
  cursor: String!
}

enum continentsConnectionOrderBy {
  id
  em
}

"""A connection to a list of items."""
type countriessConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [countriessEdge]
  total: Int
}

"""An edge in a connection."""
type countriessEdge {
  """The item at the end of the edge"""
  node: countries

  """A cursor for use in pagination"""
  cursor: String!
}

enum countriesConnectionOrderBy {
  id
  em
}

"""A connection to a list of items."""
type countries_languagessConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [countries_languagessEdge]
  total: Int
}

"""An edge in a connection."""
type countries_languagessEdge {
  """The item at the end of the edge"""
  node: countries_languages

  """A cursor for use in pagination"""
  cursor: String!
}

enum countries_languagesConnectionOrderBy {
  id
  em
}

type courses {
  id: String
  name: String
  alias: String
  desc: String
  title: String
  meta_k: String
  meta_d: String
  h1: String
  duration: Int
  img: String
  active: Int
  parent_id: Int
  lft: Int
  rgt: Int
  depth: Int
  priority: Int
  bg: String
  home: Int
}

"""A connection to a list of items."""
type coursessConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [coursessEdge]
  total: Int
}

"""An edge in a connection."""
type coursessEdge {
  """The item at the end of the edge"""
  node: courses

  """A cursor for use in pagination"""
  cursor: String!
}

enum coursesConnectionOrderBy {
  id
  em
}

"""A connection to a list of items."""
type currenciessConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [currenciessEdge]
  total: Int
}

"""An edge in a connection."""
type currenciessEdge {
  """The item at the end of the edge"""
  node: currencies

  """A cursor for use in pagination"""
  cursor: String!
}

enum currenciesConnectionOrderBy {
  id
  em
}

type districts {
  id: Int
  name: String
  native: String
  country_id: Int
}

"""A connection to a list of items."""
type districtssConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [districtssEdge]
  total: Int
}

"""An edge in a connection."""
type districtssEdge {
  """The item at the end of the edge"""
  node: districts

  """A cursor for use in pagination"""
  cursor: String!
}

enum districtsConnectionOrderBy {
  id
  em
}

type districts_regions {
  id: Int
  distrinct_id: Int
  region_id: Int
}

"""A connection to a list of items."""
type districts_regionssConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [districts_regionssEdge]
  total: Int
}

"""An edge in a connection."""
type districts_regionssEdge {
  """The item at the end of the edge"""
  node: districts_regions

  """A cursor for use in pagination"""
  cursor: String!
}

enum districts_regionsConnectionOrderBy {
  id
  em
}

type exonyms {
  id: Int
  name: String
  language_id: Int
  placeable_id: Int
  type: String
}

"""A connection to a list of items."""
type exonymssConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [exonymssEdge]
  total: Int
}

"""An edge in a connection."""
type exonymssEdge {
  """The item at the end of the edge"""
  node: exonyms

  """A cursor for use in pagination"""
  cursor: String!
}

enum exonymsConnectionOrderBy {
  id
  em
}

"""A connection to a list of items."""
type languagessConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [languagessEdge]
  total: Int
}

"""An edge in a connection."""
type languagessEdge {
  """The item at the end of the edge"""
  node: languages

  """A cursor for use in pagination"""
  cursor: String!
}

enum languagesConnectionOrderBy {
  id
  em
}

type regions {
  id: Int
  name: String
  native: String
  code: String
  country_id: Int
}

"""A connection to a list of items."""
type regionssConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [regionssEdge]
  total: Int
}

"""An edge in a connection."""
type regionssEdge {
  """The item at the end of the edge"""
  node: regions

  """A cursor for use in pagination"""
  cursor: String!
}

enum regionsConnectionOrderBy {
  id
  em
}

type RootMutations {
  """Create a cities"""
  citiesCreate(cities: citiesInput): cities

  """Create a list of cities"""
  citiesListCreate(cities: [citiesInput]): [cities]

  """Update a cities"""
  citiesUpdate(cities: citiesInput, where: SequelizeJSON): cities

  """Delete a cities"""
  citiesDelete(id: Int, where: SequelizeJSON): Int

  """Create a continents"""
  continentsCreate(continents: continentsInput): continents

  """Create a list of continents"""
  continentsListCreate(continents: [continentsInput]): [continents]

  """Update a continents"""
  continentsUpdate(continents: continentsInput, where: SequelizeJSON): continents

  """Delete a continents"""
  continentsDelete(id: Int, where: SequelizeJSON): Int

  """Create a countries"""
  countriesCreate(countries: countriesInput): countries

  """Create a list of countries"""
  countriesListCreate(countries: [countriesInput]): [countries]

  """Update a countries"""
  countriesUpdate(countries: countriesInput, where: SequelizeJSON): countries

  """Delete a countries"""
  countriesDelete(id: Int, where: SequelizeJSON): Int

  """Create a countries_languages"""
  countries_languagesCreate(countries_languages: countries_languagesInput): countries_languages

  """Create a list of countries_languages"""
  countries_languagesListCreate(countries_languages: [countries_languagesInput]): [countries_languages]

  """Update a countries_languages"""
  countries_languagesUpdate(countries_languages: countries_languagesInput, where: SequelizeJSON): countries_languages

  """Delete a countries_languages"""
  countries_languagesDelete(id: Int, where: SequelizeJSON): Int

  """Create a courses"""
  coursesCreate(courses: coursesInput): courses

  """Create a list of courses"""
  coursesListCreate(courses: [coursesInput]): [courses]

  """Update a courses"""
  coursesUpdate(courses: coursesInput, where: SequelizeJSON): courses

  """Delete a courses"""
  coursesDelete(id: Int, where: SequelizeJSON): Int

  """Create a currencies"""
  currenciesCreate(currencies: currenciesInput): currencies

  """Create a list of currencies"""
  currenciesListCreate(currencies: [currenciesInput]): [currencies]

  """Update a currencies"""
  currenciesUpdate(currencies: currenciesInput, where: SequelizeJSON): currencies

  """Delete a currencies"""
  currenciesDelete(id: Int, where: SequelizeJSON): Int

  """Create a districts"""
  districtsCreate(districts: districtsInput): districts

  """Create a list of districts"""
  districtsListCreate(districts: [districtsInput]): [districts]

  """Update a districts"""
  districtsUpdate(districts: districtsInput, where: SequelizeJSON): districts

  """Delete a districts"""
  districtsDelete(id: Int, where: SequelizeJSON): Int

  """Create a districts_regions"""
  districts_regionsCreate(districts_regions: districts_regionsInput): districts_regions

  """Create a list of districts_regions"""
  districts_regionsListCreate(districts_regions: [districts_regionsInput]): [districts_regions]

  """Update a districts_regions"""
  districts_regionsUpdate(districts_regions: districts_regionsInput, where: SequelizeJSON): districts_regions

  """Delete a districts_regions"""
  districts_regionsDelete(id: Int, where: SequelizeJSON): Int

  """Create a exonyms"""
  exonymsCreate(exonyms: exonymsInput): exonyms

  """Create a list of exonyms"""
  exonymsListCreate(exonyms: [exonymsInput]): [exonyms]

  """Update a exonyms"""
  exonymsUpdate(exonyms: exonymsInput, where: SequelizeJSON): exonyms

  """Delete a exonyms"""
  exonymsDelete(id: Int, where: SequelizeJSON): Int

  """Create a languages"""
  languagesCreate(languages: languagesInput): languages

  """Create a list of languages"""
  languagesListCreate(languages: [languagesInput]): [languages]

  """Update a languages"""
  languagesUpdate(languages: languagesInput, where: SequelizeJSON): languages

  """Delete a languages"""
  languagesDelete(id: Int, where: SequelizeJSON): Int

  """Create a regions"""
  regionsCreate(regions: regionsInput): regions

  """Create a list of regions"""
  regionsListCreate(regions: [regionsInput]): [regions]

  """Update a regions"""
  regionsUpdate(regions: regionsInput, where: SequelizeJSON): regions

  """Delete a regions"""
  regionsDelete(id: Int, where: SequelizeJSON): Int
}

input citiesInput {
  id: Int
  name: String
  slug: String
  native: String
  capital: Boolean
  country_id: Int
  population: Int
  latitude: String
  tz: String
  timezone: String
  region_id: Int
  distrinct_id: Int
  longitude: String
}

input continentsInput {
  id: Int
  name: String
  abbr: String
}

input countriesInput {
  id: Int
  currency_id: Int
  name: String
  native: String
  phone: String
  abbr: String
  capital: String
}

input countries_languagesInput {
  id: Int
  country_id: Int
  language_id: Int
}

input coursesInput {
  id: String
  name: String
  alias: String
  desc: String
  title: String
  meta_k: String
  meta_d: String
  h1: String
  duration: Int
  img: String
  active: Int
  parent_id: Int
  lft: Int
  rgt: Int
  depth: Int
  priority: Int
  bg: String
  home: Int
}

input currenciesInput {
  id: Int
  native: String
  name: String
  abbr: String
}

input districtsInput {
  id: Int
  name: String
  native: String
  country_id: Int
}

input districts_regionsInput {
  id: Int
  distrinct_id: Int
  region_id: Int
}

input exonymsInput {
  id: Int
  name: String
  language_id: Int
  placeable_id: Int
  type: String
}

input languagesInput {
  id: Int
  native: String
  name: String
  abbr: String
  rtl: Boolean
}

input regionsInput {
  id: Int
  name: String
  native: String
  code: String
  country_id: Int
}
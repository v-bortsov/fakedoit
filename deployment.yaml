apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: frontend-ingress
spec:
  rules:
  - http:
      paths:
      # - path: /api
      #   backend:
      #     serviceName: frontend
      #     servicePort: 8080
      # NOTE: this should come after /api or else it will hijack requests
      - path: /
        backend:
          serviceName: nginx-deployment-web-service
          servicePort: 80
      
---
apiVersion: v1
kind: Service
metadata:
  name: nginx-deployment-web-service
  labels:
    app: nginx-deployment-web-service
spec:
  # type: ClusterIP 
  selector:
    app: nginx-deployment
  ports:
  - port: 80
    targetPort: 80
    protocol: TCP
  externalIPs:
    - 1.2.4.120
# ---
# apiVersion: v1
# kind: PersistentVolume
# metadata:
#   name: pv-volume-rsp
#   labels:
#     type: local
# spec:
#   volumeMode: Filesystem
#   storageClassName: manual
#   capacity:
#     storage: 10Mi
#   accessModes:
#     - ReadWriteOnce
#   hostPath:
#     path: "/home/noname001/fakedoit/dist"
#     type: Directory
# ---
# apiVersion: v1
# kind: PersistentVolumeClaim
# metadata:
#   name: pv-claim-rsp
# spec:
#   storageClassName: manual
#   accessModes:
#     - ReadWriteOnce
#   resources:
#     requests:
#       storage: 3Mi
#   volumeName: pv-volume-rsp
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-deployment
spec:
  selector:
    matchLabels:
      app: balancer
  replicas: 1
  template:
    metadata:
      labels:
        app: balancer
    spec:
      containers:
      - name: balancer
        image: balancer
        imagePullPolicy: Never
        ports:
        - containerPort: 80
        # volumeMounts:
        # # - name: nginx-config
        # #   mountPath: /etc/nginx/conf.d/default.conf
        # #   subPath: nginx.conf
        # - mountPath: "/var/www/html"
        #   name: pv-volume-rsp
      # volumes:
      # - name: pv-volume-rsp
      #   persistentVolumeClaim:
      #     claimName: pv-claim-rsp
      # - name: nginx-config
      #   configMap:
      #     name: nginx-configmap
      # - name: dist
      #   hostPath:
      #     path: /home/noname001/fakedoit/dist
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: pm2graphql
spec:
  selector:
    matchLabels:
      name: pm2graphql
  template:
    metadata:
      labels:
        name: pm2graphql
    spec:
      nodeSelector:
        kubernetes.io/os: linux
      containers:
      - name: pm2graphql
        image: pm2graphql
        imagePullPolicy: Never
        envFrom:
          - configMapRef:
              name: configmap
        # lifecycle:
        #   postStart:
        #     exec:
        #       command:
        #       - "sh"
        #       - "-c"
        #       - >
        #         yarn build
        #         node ./dist/makeModels.js
        # pm2 start ./dist/server.bundle.js
        # env:
        # - name: DB_HOST
        #   value: postgres://db
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: db
spec:
  selector:
    matchLabels:
      name: db
  template:
    metadata:
      labels:
        name: db
    spec:
      nodeSelector:
        kubernetes.io/os: linux
      containers:
      - name: db
        image: db
        imagePullPolicy: Never
        envFrom:
          - configMapRef:
              name: configmap
---
apiVersion: v1
kind: Service
metadata:
  name: db
spec:
  selector:
    name: db
  ports:
  - port: 5432
    targetPort: 5432
---
apiVersion: v1
kind: Service
metadata:
  name: pm2graphql
spec:
  selector:
    name: pm2graphql
  ports:
  - port: 4000
    targetPort: 4000
